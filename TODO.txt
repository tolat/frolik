- Create routes + connect frontend to backend for picture retrieval (1 day)
DONE

- Connect backend to S3 bucket for image storage and retrieval (3 days)
DONE

- Still need to download all photos from S3
DONE

- Get Edit profile modal working (1 day)

- Add Users Modal.
Set up Add Users modal in Go page to display up to 4 non friend users 
and all friends that are "ready" or searching. Need to add at least 1 
new connection to create an outing! (1 day)

- Need page for creating account. (1day)

- Need backend set up for account creation. (1day)

- Finish chat page layout / interface. Put Chat in modal (1 day)

- Get chat functionality working. need to make a chat object
in the databases (5 days)

- Creat Outing Funcitonality. 
Set up a pending outing for all users, and take user to outing modal. 
Only 3 pending outings at a time.Can only cancel outings that have not 
been accepted by others. Outing Modal will show activuty, users, link to 
chat, upload photos area (1 photo per user), change outing status to 
competed or cancelled area (all users who accepted the outing must mark
outing as completed or cancelled). Can also rate activity here - ratings 
only apply once outingis competed. Only once ratings AND minimum 1 photo 
is uploaded can the outing be marked as completed! (3 days)

- Completed outing updates activity rating, and photos. (1 day)

- Need notifications page showing freind requests, outing requests, and 
confirmations. do this in modal. dispatch notifications (1 day)



- DEPLOY WOO!!! (3 days)

TOTAL: 18 days / 3.5 weeks


NOTES:


  // Option 1: Download image from S3 storage
  //const fileName = `${user.username}-profile-picture.jpeg`;
  //const clientAccessUrl = `${process.env.SERVER}/static/images/${fileName}`;
  //const writePath = `${path.join(__dirname, "../", "public/images/")}`;
  //
  //// Only Download if no image found
  //const fileNames = await fs.readdirSync(writePath);
  //if (fileNames.find((n) => n === fileName)) {
  //  await (
  //    await downloadFromS3(process.env.AWS_DEV_BUCKET, user.profile_picture)
  //  ).pipe(fs.createWriteStream(writePath + `/${fileName}`));
  //}

  // Option 2: send signedURL to client and user that to download image
  // const signedURL = await getSignedURLFromS3(
  //   process.env.AWS_DEV_BUCKET,
  //   user.profile_picture
  // );



Below is a laoder component that we might use again
    <div
        style={{ ...imageLoadingStyle, ...props.style }}
        className={`${styles.imageLoading}  ${props.backerClassName}`}
      >
        <div className={styles.spinner}>
          <div></div>
          <div></div>
          <div></div>
          <div></div>
        </div>
      </div>